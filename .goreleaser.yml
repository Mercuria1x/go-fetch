project_name: go-fetch

before:
  hooks:
    - go mod tidy

# .goreleaser.yml
builds:
  # 你能用 多个 构建 定义，yaml格式
  -
    #  main.go 文件或者主包的路径 .
    # 默认 `.`.
    main: ./main.go

    # 命名 最终二进制文件的模版.
    # 默认是 项目目录的名称.
    binary: go-fetch

    # 设置 命令参数到自定义的 build tags.
    # 默认是 空.
    flags:
      - -tags=dev

    # Custom asmflags templates.
    # 默认是 空.
    asmflags:
      - -D mysymbol
      - all=-trimpath={{.Env.GOPATH}}

    # Custom gcflags templates.
    # 默认是 空.
    gcflags:
      - all=-trimpath={{.Env.GOPATH}}
      - ./dontoptimizeme=-N

    # Custom ldflags templates.
    # 默认是 `-s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}}`.
    ldflags:
     - -s -w -X main.build={{.Version}}
     - ./usemsan=-msan

    # 运行构建期间的环境变量.
    # 默认是 空.
    env:
      - CGO_ENABLED=0

    # GOOS 构建列表r.
    # 更多内容，请参考: https://golang.org/doc/install/source#environment
    # 默认为 darwin 和 linux.
    goos:
      - windows
      - linux

    # GOARCH 构建系结构.
    # 更多内容，请参考: https://golang.org/doc/install/source#environment
    # 默认为 386 和 amd64.
    goarch:
      - amd64
      - arm64

    #  GOOS + GOARCH + GOARM 组合忽略列表.
    # 默认是 空.
    ignore:
      - goos: windows
        goarch: arm64

archives:
  - name_template: >-
      {{ .ProjectName }}_
      {{- .Version }}_
      {{ .Os }}_
      {{ .Arch }}
    wrap_in_directory: true
    format_overrides:
      - goos: windows
        format: zip
    builds_info:
      group: root
      owner: root
